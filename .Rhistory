exclude <- readRDS("~/GitWorkArea/covid19-forecasts-orderly/draft/DeCa_model/20201006-151057-87f68c19/exclude.rds")
exclude
"Spain" %in% exclude
DeCa_latest <- readRDS("~/GitWorkArea/covid19-forecasts-orderly/draft/DeCa_model/20201006-151057-87f68c19/DeCa_latest.rds")
View(DeCa_latest)
DeCa_latest <- readRDS("~/GitWorkArea/covid19-forecasts-orderly/draft/DeCa_model/20201006-115418-a4178cb4/DeCa_latest.rds")
View(DeCa_latest)
head(mtcars)
colSums(mtcars)
which(colSums(mtcars) > 500)
idx <- which(colSums(mtcars) > 500)
mtcars[, idx]
mtcars$date <- Sys.Date()
head(mtcars)
idx <- which(colSums(mtcars) > 500)
idx <- which(colSums(mtcars[ , -12]) > 500)
idx
x <- letters[1:10]
names(x) <- x
x
library(purrr)
x <- letters[1:10]
names(x) <- 1:10
x
imap(x, function(thing, name) message("thing is ", thing, " and name is ", name))
install.packages("fitdistrplus")
library(fitdistrplus)
data(groundbeef)
serving <- groundbeef$serving
fitg <- fitdist(serving, "gamma")
fitg
out <- rgamma(1e4, shape = 4.00825257, rate = 0.05441911)
library(ggplot2)
ggplot() + geom_density(aes(serving), fill = "red", col = NA, alpha = 0.3)
ggplot() + geom_density(aes(serving), fill = "red", col = NA, alpha = 0.3) + geom_density(aes(out), fill = "blue", col = NA, alpha = 0.3)
dim(serving)
length(serving)
ggplot() + geom_histogram(aes(serving), fill = "red", col = NA, alpha = 0.3) + geom_density(aes(out), fill = "blue", col = NA, alpha = 0.3)
ggplot() + geom_histogram(aes(serving), fill = "red", col = NA, alpha = 0.3, bindwidth = 1) + geom_density(aes(out), fill = "blue", col = NA, alpha = 0.3)
ggplot() + geom_histogram(aes(serving), fill = "red", col = NA, alpha = 0.3, binwidth = 1) + geom_density(aes(out), fill = "blue", col = NA, alpha = 0.3)
f <- function(beta, x) exp(-beta * abs(x))
x <- seq(-10, 10, 0.1)
y1 <- f(0.1, x)
y2 <- f(0.5, x)
y3 <- f(1, x)
library(ggplot2)
ggplot() +
geom_line(aes(x, y1, col = "red")) +
geom_line(aes(x, y2, col = "blue")) +
geom_line(aes(x, y3, col = "green")) +
scale_color_identity(
breaks = c("red", "blue", "green"),
labels = c(0.1, 0.5, 1),
guide = "legend"
) +
theme_minimal() +
theme(legend.position = "top")
?isTRUE
combn(letters[1:4], 2)
x <- expand.grid(rep(list(c('A', 'G', 'T', 'C')), 4))
x[1, ]
colnames(x) <- c("t1", "t2", "t3", "t4")
x <- expand.grid(rep(list(c('o1', 'd1', 'o2', 'd2')), 4))
colnames(x) <- c("t1", "t2", "t3", "t4")
x <- x[x$t1 != "d1", ]
x <- x[x$t1 != "d2", ]
View(x)
x <- combn(c('o1', 'd1', 'o2', 'd2'), 4)
x
x <- expand.grid(rep(list(c('o1', 'd1', 'o2', 'd2')), 4))
colnames(x) <- c("t1", "t2", "t3", "t4")
x <- x[x$t1 != "d1", ]
x <- x[x$t1 != "d2", ]
View(x)
all(events in x[1, ])
all(events %in% x[1, ])
events <- c('o1', 'd1', 'o2', 'd2')
all(events %in% x[1, ])
events %in% x[1, ]
beta_shape1shape22muvar <- function(shape1, shape2, max_shed, offset) {
mu <- shape1 / (shape1 + shape2)
sigma2 <- (shape1 * shape2) / ((shape1 + shape2)^2 * (shape1 + shape2 + 1))
shifted_mu <- mu * (max_shed - offset) + offset
shifted_sd2 <- sigma2 * (max_shed - offset)^2
list(mu = shifted_mu, sigma2 = shifted_sd2)
}
beta_shape1shape22muvar(1, 1, 21, -1)
a1 <- runif(1e4, 1, 100)
b1 <- runif(1e4, 1, 100)
grid <- expand.grid(a1 = a1, b1 = b1)
out <- map2(a1, b1, function(a, b) beta_shape1shape22muvar(a, b, 21, -1))
library(purrr)
out <- map2(a1, b1, function(a, b) beta_shape1shape22muvar(a, b, 21, -1))
mu_distr <- map(out, ~ .[["mu"]])
mean(mu_distr)
View(mu_distr)
mu_distr <- map_dbl(out, ~ .[["mu"]])
mean(mu_distr)
library(ggplot2)
ggplot() + geom_density(aes(mu_distr))
var_distr <- map_dbl(out, ~ .[["sigma2"]])
ggplot() + geom_density(aes(var_distr))
a1 <- runif(1e4, 0, 100)
b1 <- runif(1e4, 0, 100)
out <- map2(a1, b1, function(a, b) beta_shape1shape22muvar(a, b, 21, -1))
mu_distr <- map_dbl(out, ~ .[["mu"]])
var_distr <- map_dbl(out, ~ .[["sigma2"]])
ggplot() + geom_density(aes(mu_distr))
ggplot() + geom_density(aes(var_distr))
ggplot() + geom_density(aes(sqrt(var_distr)))
p1 <- ggplot() + geom_density(aes(mu_distr))
p2 <- ggplot() + geom_density(aes(sqrt(var_distr)))
p <- cowplot::plot_grid(p1, p2, nrow = 2)
cowplot::save_plot("mu_sd_prior_distr.png", p)
getwd()
a1 <- runif(1e4, 1, 100)
b1 <- runif(1e4, 1, 100)
out <- map2(a1, b1, function(a, b) beta_shape1shape22muvar(a, b, 21, -1))
mu_distr <- map_dbl(out, ~ .[["mu"]])
var_distr <- map_dbl(out, ~ .[["sigma2"]])
p1 <- ggplot() + geom_density(aes(mu_distr))
p2 <- ggplot() + geom_density(aes(sqrt(var_distr)))
p1
a1 <- rexp(1e4)
b1 <- rexp(1e4)
out <- map2(a1, b1, function(a, b) beta_shape1shape22muvar(a, b, 21, -1))
mu_distr <- map_dbl(out, ~ .[["mu"]])
var_distr <- map_dbl(out, ~ .[["sigma2"]])
p1 <- ggplot() + geom_density(aes(mu_distr))
p2 <- ggplot() + geom_density(aes(sqrt(var_distr)))
p1
p2 <- ggplot() + geom_density(aes(sqrt(var_distr)))
p2
range(a1)
hist(a1)
setwd("/Volumes/sb")
setwd("/Volumes/sbhatia")
setwd("/Volumes/")
setwd("/Volumes/sbhatia")
setwd("/Volumes/sbhatia/covid19-si")
library(context)
source("global.R")
source("utils.R")
root <- "context"
packages <- c("rstan", "dplyr","purrr", "ggplot2", "epitrix", "glue")
source_files <- c("global.R", "utils.R")
ctx <-context_save(
root, packages = packages, sources = source_files
)
obj <- didehpc::queue_didehpc(ctx)
obj <- didehpc::queue_didehpc(ctx)
model_features <- list("mixture", "right-bias", "left-bias", "conditioning on isolation", "recall")
library(gtools)
expand.grid(model_features)
expand.grid(mixture = "mixture", lb = "left-bias")
expand.grid(mixture = "mixture", lb = "left-bias", rb = "right-bias")
combinations(3, 3, v=1:n, set=TRUE, repeats.allowed=FALSE)
combinations(3, 3, 1:3, set=TRUE, repeats.allowed=FALSE)
combinations(3, 1, 1:3, set=TRUE, repeats.allowed=FALSE)
combinations(3, 2, 1:3, set=TRUE, repeats.allowed=FALSE)
m <- sapply(1:32,function(x){ as.integer(intToBits(x))})
m
intToBits(32)
install.packages("binaryLogic")
library(binaryLogic)
as.binary(32)
as.binary(1:32)
library(purrr)
as.binary(32)
data.frame(as.binary(32))
data.frame(x = as.binary(32))
out <- data.frame(x = as.binary(32))
out
tidyr::spread(out, x, x)
out <- map_dfr(
1:32, function(x) {
data.frame(flag = as.binary(x))
}
)
out
out <- imap_dfr(
1:32, function(x, index) {
data.frame(flag = as.binary(x))
}, .id = "index"
)
out
tidyr::spread(out, index, flag)
out[25:29, ]
out[22:25, ]
as.binary(2)
as.binary(2, n = 5)
out <- imap_dfr(
1:32, function(x, index) {
data.frame(flag = as.binary(x, n = 5))
}, .id = "index"
)
as.binary(32)
out <- imap_dfr(
1:32, function(x, index) {
data.frame(flag = as.binary(x, n = 6))
}, .id = "index"
)
tidyr::spread(out, index, flag)
out
x <- 32
out <- data.frame(flag = as.binary(x, n = 6))
out
as.binary(32, littleEndian = FALSE, size = 5)
as.binary(32, littleEndian = FALSE, n = 5)
?as.binary
as.binary(32, n = 5)
as.binary(31, n = 5)
out <- imap_dfr(
0:31, function(x, index) {
out <- data.frame(flag = as.binary(x, n = 5))
out$model_features <- model_features
}, .id = "index"
)
out <- map_dfr(
0:31, function(x) {
out <- data.frame(flag = as.binary(x, n = 5))
out$model_features <- model_features
}
)
out <- map_dfr(
0:31, function(x) {
out <- data.frame(flag = as.binary(x, n = 5))
out$model_features <- model_features
out
}
)
out
tidyr::spread(out, model_features, flag)
tidyr::pivot_wider(out, id_cols = NULL, names_from = "model_features", values_from = "flag")
out2 <- map_dfr(
0:31, function(x) {
out <- data.frame(flag = as.binary(x, n = 5))
out$model_features <- model_features
out$index <- x
out
}
)
tidyr::pivot_wider(out2, id_cols = NULL, names_from = "model_features", values_from = "flag")
out2 <- tidyr::pivot_wider(out2, id_cols = NULL, names_from = "model_features", values_from = "flag")
readr::write_csv(ou2, "~/GitWorkArea/covid19-si/models-to-run.csv")
readr::write_csv(out2, "~/GitWorkArea/covid19-si/models-to-run.csv")
model_features <- c("mixture", "left-bias", "conditioning on isolation", "recall")
out2 <- map_dfr(
0:15, function(x) {
out <- data.frame(flag = as.binary(x, n = 4))
out$model_features <- model_features
out$index <- x
out
}
)
library(purrr)
out2 <- map_dfr(
0:15, function(x) {
out <- data.frame(flag = as.binary(x, n = 4))
out$model_features <- model_features
out$index <- x
out
}
)
library(binaryLogic)
out2 <- map_dfr(
0:15, function(x) {
out <- data.frame(flag = as.binary(x, n = 4))
out$model_features <- model_features
out$index <- x
out
}
)
tidyr::spread(out, model_features, flag)
out2 <- tidyr::pivot_wider(out2, id_cols = NULL, names_from = "model_features", values_from = "flag")
out2
out2 <- dplyr::arrange(out2, `conditioning on isolation`)
View(out2)
out2
readr::write_csv(out2, "~/GitWorkArea/covid19-si/models-to-run.csv")
library(orderly)
?orderly_pull_dependencies
/sd
?sd
f <- function(vec) {
length(unique(vec))
}
f(c(1, 1))
f(c(1, 1, 2))
f(c(1, 1, 2, 2, 3))
setwd('GitWorkArea/spatialbranchr/')
devtools::document()
devtools::check()
pkgdown::build_site()
devtools::load_all()
pkgdown::build_site()
.Last.error.trace
devtools::check()
getwd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
install.packages("MASS")
devtools::check()
devtools::check()
devtools::check()
traceback*
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::check()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
