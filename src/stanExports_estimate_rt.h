// Generated by rstantools.  Do not edit by hand.

/*
    spatialbranchr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    spatialbranchr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with spatialbranchr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_estimate_rt_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_estimate_rt");
    reader.add_event(74, 72, "end", "model_estimate_rt");
    return reader;
}
int
r_in(const int& pos,
         const std::vector<int>& pos_var, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 17;
        for (int p = 1; p <= size(pos_var); ++p) {
            current_statement_begin__ = 18;
            if (as_bool(logical_eq(get_base1(pos_var, p, "pos_var", 1), pos))) {
                current_statement_begin__ = 20;
                return stan::math::promote_scalar<fun_return_scalar_t__>(1);
            }
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct r_in_functor__ {
            int
    operator()(const int& pos,
         const std::vector<int>& pos_var, std::ostream* pstream__) const {
        return r_in(pos, pos_var, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_estimate_rt
  : public stan::model::model_base_crtp<model_estimate_rt> {
private:
        int T;
        int N;
        std::vector<std::vector<int> > I;
        row_vector_d SI;
        std::vector<std::vector<int> > rindex;
        int num_Rjt;
        std::vector<std::vector<double> > pmovement;
        double prior_mean;
        double prior_std;
public:
    model_estimate_rt(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_estimate_rt(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_estimate_rt_namespace::model_estimate_rt";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 1);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 30;
            validate_non_negative_index("I", "T", T);
            validate_non_negative_index("I", "N", N);
            context__.validate_dims("data initialization", "I", "int", context__.to_vec(T,N));
            I = std::vector<std::vector<int> >(T, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            size_t I_k_0_max__ = T;
            size_t I_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < I_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < I_k_0_max__; ++k_0__) {
                    I[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t I_i_0_max__ = T;
            size_t I_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < I_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < I_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "I[i_0__][i_1__]", I[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("SI", "(T + 1)", (T + 1));
            context__.validate_dims("data initialization", "SI", "row_vector_d", context__.to_vec((T + 1)));
            SI = Eigen::Matrix<double, 1, Eigen::Dynamic>((T + 1));
            vals_r__ = context__.vals_r("SI");
            pos__ = 0;
            size_t SI_j_1_max__ = (T + 1);
            for (size_t j_1__ = 0; j_1__ < SI_j_1_max__; ++j_1__) {
                SI(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("rindex", "T", T);
            validate_non_negative_index("rindex", "N", N);
            context__.validate_dims("data initialization", "rindex", "int", context__.to_vec(T,N));
            rindex = std::vector<std::vector<int> >(T, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("rindex");
            pos__ = 0;
            size_t rindex_k_0_max__ = T;
            size_t rindex_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < rindex_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < rindex_k_0_max__; ++k_0__) {
                    rindex[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t rindex_i_0_max__ = T;
            size_t rindex_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < rindex_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < rindex_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "rindex[i_0__][i_1__]", rindex[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "num_Rjt", "int", context__.to_vec());
            num_Rjt = int(0);
            vals_i__ = context__.vals_i("num_Rjt");
            pos__ = 0;
            num_Rjt = vals_i__[pos__++];
            current_statement_begin__ = 34;
            validate_non_negative_index("pmovement", "N", N);
            validate_non_negative_index("pmovement", "N", N);
            context__.validate_dims("data initialization", "pmovement", "double", context__.to_vec(N,N));
            pmovement = std::vector<std::vector<double> >(N, std::vector<double>(N, double(0)));
            vals_r__ = context__.vals_r("pmovement");
            pos__ = 0;
            size_t pmovement_k_0_max__ = N;
            size_t pmovement_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < pmovement_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < pmovement_k_0_max__; ++k_0__) {
                    pmovement[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "prior_mean", "double", context__.to_vec());
            prior_mean = double(0);
            vals_r__ = context__.vals_r("prior_mean");
            pos__ = 0;
            prior_mean = vals_r__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "prior_std", "double", context__.to_vec());
            prior_std = double(0);
            vals_r__ = context__.vals_r("prior_std");
            pos__ = 0;
            prior_std = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 42;
            validate_non_negative_index("R", "num_Rjt", num_Rjt);
            num_params_r__ += (1 * num_Rjt);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_estimate_rt() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 42;
        if (!(context__.contains_r("R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R");
        pos__ = 0U;
        validate_non_negative_index("R", "num_Rjt", num_Rjt);
        context__.validate_dims("parameter initialization", "R", "double", context__.to_vec(num_Rjt));
        std::vector<double> R(num_Rjt, double(0));
        size_t R_k_0_max__ = num_Rjt;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            R[k_0__] = vals_r__[pos__++];
        }
        size_t R_i_0_max__ = num_Rjt;
        for (size_t i_0__ = 0; i_0__ < R_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, R[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 42;
            std::vector<local_scalar_t__> R;
            size_t R_d_0_max__ = num_Rjt;
            R.reserve(R_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    R.push_back(in__.scalar_lb_constrain(0));
            }
            // model body
            {
            current_statement_begin__ = 46;
            local_scalar_t__ row_total(DUMMY_VAR__);
            (void) row_total;  // dummy to suppress unused var warning
            stan::math::initialize(row_total, DUMMY_VAR__);
            stan::math::fill(row_total, DUMMY_VAR__);
            current_statement_begin__ = 47;
            local_scalar_t__ a(DUMMY_VAR__);
            (void) a;  // dummy to suppress unused var warning
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            stan::math::assign(a,pow((prior_mean / prior_std), 2));
            current_statement_begin__ = 48;
            local_scalar_t__ b(DUMMY_VAR__);
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            stan::math::assign(b,(prior_mean / pow(prior_std, 2)));
            current_statement_begin__ = 49;
            lp_accum__.add(gamma_log<propto__>(R, a, b));
            current_statement_begin__ = 51;
            for (int t = 2; t <= T; ++t) {
                current_statement_begin__ = 52;
                for (int j = 1; j <= N; ++j) {
                    {
                    current_statement_begin__ = 53;
                    local_scalar_t__ mu(DUMMY_VAR__);
                    (void) mu;  // dummy to suppress unused var warning
                    stan::math::initialize(mu, DUMMY_VAR__);
                    stan::math::fill(mu, DUMMY_VAR__);
                    stan::math::assign(mu,0);
                    current_statement_begin__ = 55;
                    for (int i = 1; i <= N; ++i) {
                        {
                        current_statement_begin__ = 56;
                        local_scalar_t__ tmp(DUMMY_VAR__);
                        (void) tmp;  // dummy to suppress unused var warning
                        stan::math::initialize(tmp, DUMMY_VAR__);
                        stan::math::fill(tmp, DUMMY_VAR__);
                        stan::math::assign(tmp,0);
                        current_statement_begin__ = 63;
                        for (int s = 1; s <= t; ++s) {
                            current_statement_begin__ = 64;
                            stan::math::assign(tmp, (tmp + (get_base1(get_base1(I, s, "I", 1), i, "I", 2) * get_base1(SI, ((t - s) + 1), "SI", 1))));
                        }
                        current_statement_begin__ = 66;
                        stan::math::assign(tmp, ((tmp * get_base1(get_base1(pmovement, i, "pmovement", 1), j, "pmovement", 2)) * get_base1(R, get_base1(get_base1(rindex, t, "rindex", 1), i, "rindex", 2), "R", 1)));
                        current_statement_begin__ = 67;
                        stan::math::assign(mu, (mu + tmp));
                        }
                    }
                    current_statement_begin__ = 69;
                    lp_accum__.add(poisson_log(get_base1(get_base1(I, t, "I", 1), j, "I", 2), mu));
                    }
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("R");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(num_Rjt);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_estimate_rt_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> R;
        size_t R_d_0_max__ = num_Rjt;
        R.reserve(R_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
            R.push_back(in__.scalar_lb_constrain(0));
        }
        size_t R_k_0_max__ = num_Rjt;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            vars__.push_back(R[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_estimate_rt";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = num_Rjt;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = num_Rjt;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_estimate_rt_namespace::model_estimate_rt stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
